local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local itemsFolder = workspace:WaitForChild("Items")
local validNames = { Main = true, Handle = true, Coal = true, Meat = true }

-- Exclude certain parent names
local function isExcludedParent(name)
	return name:match("^Item Chest") or name == "Sapling"
end

-- Remove old GUI if it exists
local oldGui = player:FindFirstChild("PlayerGui"):FindFirstChild("PartMoverGui")
if oldGui then oldGui:Destroy() end

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "PartMoverGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 260, 0, 400)
frame.Position = UDim2.new(0, 10, 0.5, -200)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BackgroundTransparency = 1 -- Start hidden, fade in
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Visible = true -- Default visible

-- === Title Panel ===
local titlePanel = Instance.new("Frame", frame)
titlePanel.Size = UDim2.new(1, 0, 0, 30)
titlePanel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
titlePanel.BorderSizePixel = 0

local titleLabel = Instance.new("TextLabel", titlePanel)
titleLabel.Size = UDim2.new(1, 0, 1, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Bring Item"
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 18
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextStrokeTransparency = 0.8

-- === Scrollable Area ===
local scrollingFrame = Instance.new("ScrollingFrame", frame)
scrollingFrame.Size = UDim2.new(1, 0, 1, -30)
scrollingFrame.Position = UDim2.new(0, 0, 0, 30)
scrollingFrame.BackgroundTransparency = 1
scrollingFrame.BorderSizePixel = 0
scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollingFrame.ScrollBarThickness = 6
scrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local uiList = Instance.new("UIListLayout", scrollingFrame)
uiList.SortOrder = Enum.SortOrder.LayoutOrder
uiList.Padding = UDim.new(0, 4)

-- Track buttons
local buttons = {}

local function createButtonFor(parentName, quantity)
	local button = Instance.new("TextButton")
	button.Parent = scrollingFrame
	button.Size = UDim2.new(1, -10, 0, 28)
	button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.Font = Enum.Font.SourceSans
	button.TextSize = 16
	button.Text = "Move: " .. parentName .. " (" .. quantity .. ")"
	button.Name = parentName

	button.MouseButton1Click:Connect(function()
		local moveTo = hrp.Position + hrp.CFrame.LookVector * 6 + Vector3.new(0, 3, 0)
		local count = 0

		for _, instance in ipairs(itemsFolder:GetChildren()) do
			if instance:IsA("Model") and instance.Name == parentName and not isExcludedParent(instance.Name) then
				local origin = instance:GetModelCFrame().Position
				for _, part in ipairs(instance:GetDescendants()) do
					if part:IsA("BasePart") then
						local offset = part.Position - origin
						part.Position = moveTo + offset
					end
				end
				count += 1
			end
		end

		print(`[Moved] {count} model(s) named "{parentName}" to position {moveTo}`)
	end)

	buttons[parentName] = button
end

-- Update buttons every second
task.spawn(function()
	while true do
		local currentCounts = {}

		for _, part in ipairs(itemsFolder:GetDescendants()) do
			local parent = part.Parent
			if validNames[part.Name] and parent and not isExcludedParent(parent.Name) then
				currentCounts[parent.Name] = (currentCounts[parent.Name] or 0) + 1
			end
		end

		-- Add new buttons or update text
		for name, count in pairs(currentCounts) do
			if buttons[name] then
				buttons[name].Text = "Move: " .. name .. " (" .. count .. ")"
			else
				createButtonFor(name, count)
			end
		end

		-- Remove buttons for items that are gone
		for name, button in pairs(buttons) do
			if not currentCounts[name] then
				button:Destroy()
				buttons[name] = nil
			end
		end

		task.wait(1)
	end
end)

-- Tween fade in/out
local isVisible = true
local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local function fadeGUI(show)
	if show then
		frame.Visible = true
		local fadeIn = TweenService:Create(frame, tweenInfo, { BackgroundTransparency = 0.2 })
		fadeIn:Play()
	else
		local fadeOut = TweenService:Create(frame, tweenInfo, { BackgroundTransparency = 1 })
		fadeOut:Play()
		fadeOut.Completed:Connect(function()
			frame.Visible = false
		end)
	end
end

-- Toggle GUI with B key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.B then
		isVisible = not isVisible
		fadeGUI(isVisible)
	end
end)

-- Initial fade in
fadeGUI(true)
